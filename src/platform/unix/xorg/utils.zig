//! This file contains helper function to use on the linux platforms
const std = @import("std");
const common = @import("common");
const ScanCode = common.keyboard_and_mouse.ScanCode;
const libx11 = @import("x11/xlib.zig");
const maxInt = std.math.maxInt;

pub const DEFAULT_SCREEN_DPI: f32 = @as(f32, 96);

pub inline fn strCpy(src: [*:0]const u8, dst: [*]u8, count: usize) void {
    // TODO: is there any benefit in using libc strCpy.
    for (0..count) |i| {
        dst[i] = src[i];
    }
}

pub inline fn strLen(src: [*:0]const u8) usize {
    return std.mem.len(src);
}

/// returns true if both strings are equals.
pub inline fn strEquals(a: [*:0]const u8, b: [*:0]const u8) bool {
    return (std.mem.orderZ(u8, a, b) == std.math.Order.eq);
}

pub const WindowPropError = error{
    BadPropType,
    PropNotFound,
};

pub fn x11WindowProperty(
    display: *libx11.Display,
    w: libx11.Window,
    property: libx11.Atom,
    prop_type: libx11.Atom,
    value: ?[*]?[*]u8,
) WindowPropError!u32 {
    const MAX_C_LONG = @as(c_long, maxInt(c_long));
    var actual_type: libx11.Atom = undefined;
    var actual_format: c_int = undefined;
    var nitems: c_ulong = 0;
    var bytes_after: c_ulong = undefined;
    const result = libx11.XGetWindowProperty(
        display,
        w,
        property,
        0,
        MAX_C_LONG,
        libx11.False,
        prop_type,
        &actual_type,
        &actual_format,
        &nitems,
        &bytes_after,
        value,
    );

    if (result != libx11.Success) {
        if (actual_type != libx11.None and actual_type != prop_type) {
            return WindowPropError.BadPropType;
        }
        return WindowPropError.PropNotFound;
    }
    // make sure no bytes are left behind.
    std.debug.assert(bytes_after == 0);
    return @intCast(nitems);
}

/// Returns the state of the Key Modifiers for the current event,
/// by decoding the state field.
pub fn decodeKeyMods(state: c_uint) common.keyboard_and_mouse.KeyModifiers {
    var mods = common.keyboard_and_mouse.KeyModifiers{
        .shift = (state & libx11.ShiftMask != 0),
        .ctrl = (state & libx11.ControlMask != 0),
        .alt = (state & libx11.Mod1Mask != 0),
        .num_lock = (state & libx11.Mod2Mask != 0),
        .meta = (state & libx11.Mod4Mask != 0),
        .caps_lock = (state & libx11.LockMask != 0),
    };
    return mods;
}

pub fn keycodeToScancode(code: u32) ScanCode {
    const look_up_table = [121]ScanCode{
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Num1,
        ScanCode.Num2,
        ScanCode.Num3,
        ScanCode.Num4,
        ScanCode.Num5,
        ScanCode.Num6,
        ScanCode.Num7,
        ScanCode.Num8,
        ScanCode.Num9,
        ScanCode.Num0,
        ScanCode.Hyphen,
        ScanCode.Equals,
        ScanCode.Backspace,
        ScanCode.Tab,
        ScanCode.Q,
        ScanCode.W,
        ScanCode.E,
        ScanCode.R,
        ScanCode.T,
        ScanCode.Y,
        ScanCode.U,
        ScanCode.I,
        ScanCode.O,
        ScanCode.P,
        ScanCode.LBracket,
        ScanCode.RBracket,
        ScanCode.Return,
        ScanCode.LControl,
        ScanCode.A,
        ScanCode.S,
        ScanCode.D,
        ScanCode.F,
        ScanCode.G,
        ScanCode.H,
        ScanCode.J,
        ScanCode.K,
        ScanCode.L,
        ScanCode.Semicolon,
        ScanCode.Quote,
        ScanCode.Grave,
        ScanCode.LShift,
        ScanCode.Backslash,
        ScanCode.Z,
        ScanCode.X,
        ScanCode.C,
        ScanCode.V,
        ScanCode.B,
        ScanCode.N,
        ScanCode.M,
        ScanCode.Comma,
        ScanCode.Period,
        ScanCode.Slash,
        ScanCode.RShift,
        ScanCode.NumpadMultiply,
        ScanCode.LAlt,
        ScanCode.Space,
        ScanCode.CapsLock,
        ScanCode.F1,
        ScanCode.F2,
        ScanCode.F3,
        ScanCode.F4,
        ScanCode.F5,
        ScanCode.F6,
        ScanCode.F7,
        ScanCode.F8,
        ScanCode.F9,
        ScanCode.F10,
        ScanCode.NumLock,
        ScanCode.ScrollLock,
        ScanCode.Numpad7,
        ScanCode.Numpad8,
        ScanCode.Numpad9,
        ScanCode.NumpadSubtract,
        ScanCode.Numpad4,
        ScanCode.Numpad5,
        ScanCode.Numpad6,
        ScanCode.NumpadAdd,
        ScanCode.Numpad1,
        ScanCode.Numpad2,
        ScanCode.Numpad3,
        ScanCode.Numpad0,
        ScanCode.NumpadDecimal,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.F11,
        ScanCode.F12,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.Unknown,
        ScanCode.NumpadReturn,
        ScanCode.RControl,
        ScanCode.NumpadDivide,
        ScanCode.PrintScreen,
        ScanCode.RAlt,
        ScanCode.Return, // LineFeed
        ScanCode.Home,
        ScanCode.Up,
        ScanCode.PageUp,
        ScanCode.Left,
        ScanCode.Right,
        ScanCode.End,
        ScanCode.Down,
        ScanCode.PageDown,
        ScanCode.Insert,
        ScanCode.Delete,
        ScanCode.Unknown, // Macro
        ScanCode.VolumeMute,
        ScanCode.VolumeDown,
        ScanCode.VolumeUp,
        // 116 => ScanCode.POWER,
        // 117 => ScanCode.NumpadEqual,
        // // 118 => ScanCode.KPPLUSMINUS,
        // 119 => ScanCode.Pause,
        // // 120 => ScanCode.SCALE,
        // 121 => ScanCode.NumpadComma,
        // 122 => ScanCode.Lang1,
        // 123 => ScanCode.Lang2,
        // 124 => ScanCode.IntlYen,
        // 125 => ScanCode.SuperLeft,
        // 126 => ScanCode.SuperRight,
        // 127 => ScanCode.ContextMenu,
        // 128 => ScanCode.STOP,
        // 129 => ScanCode.AGAIN,
        // 130 => ScanCode.PROPS,
        // 131 => ScanCode.UNDO,
        // 132 => ScanCode.FRONT,
        // 133 => ScanCode.COPY,
        // 134 => ScanCode.OPEN,
        // 135 => ScanCode.PASTE,
        // 136 => ScanCode.FIND,
        // 137 => ScanCode.CUT,
        // 138 => ScanCode.HELP,
        // 139 => ScanCode.MENU,
        // 140 => ScanCode.CALC,
        // 141 => ScanCode.SETUP,
        // 142 => ScanCode.SLEEP,
        // 143 => ScanCode.WAKEUP,
        // 144 => ScanCode.FILE,
        // 145 => ScanCode.SENDFILE,
        // 146 => ScanCode.DELETEFILE,
        // 147 => ScanCode.XFER,
        // 148 => ScanCode.PROG1,
        // 149 => ScanCode.PROG2,
        // 150 => ScanCode.WWW,
        // 151 => ScanCode.MSDOS,
        // 152 => ScanCode.COFFEE,
        // 153 => ScanCode.ROTATE_DISPLAY,
        // 154 => ScanCode.CYCLEWINDOWS,
        // 155 => ScanCode.MAIL,
        // 156 => ScanCode.BOOKMARKS,
        // 157 => ScanCode.COMPUTER,
        // 158 => ScanCode.BACK,
        // 159 => ScanCode.FORWARD,
        // 160 => ScanCode.CLOSECD,
        // 161 => ScanCode.EJECTCD,
        // 162 => ScanCode.EJECTCLOSECD,
        // 163 => ScanCode.MediaTrackNext,
        // 164 => ScanCode.MediaPlayPause,
        // 165 => ScanCode.MediaTrackPrevious,
        // 166 => ScanCode.MediaStop,
        // 167 => ScanCode.RECORD,
        // 168 => ScanCode.REWIND,
        // 169 => ScanCode.PHONE,
        // 170 => ScanCode.ISO,
        // 171 => ScanCode.CONFIG,
        // 172 => ScanCode.HOMEPAGE,
        // 173 => ScanCode.REFRESH,
        // 174 => ScanCode.EXIT,
        // 175 => ScanCode.MOVE,
        // 176 => ScanCode.EDIT,
        // 177 => ScanCode.SCROLLUP,
        // 178 => ScanCode.SCROLLDOWN,
        // 179 => ScanCode.KPLEFTPAREN,
        // 180 => ScanCode.KPRIGHTPAREN,
        // 181 => ScanCode.NEW,
        // 182 => ScanCode.REDO,
        // 183 => ScanCode.F13,
        // 184 => ScanCode.F14,
        // 185 => ScanCode.F15,
        // 186 => ScanCode.F16,
        // 187 => ScanCode.F17,
        // 188 => ScanCode.F18,
        // 189 => ScanCode.F19,
        // 190 => ScanCode.F20,
        // 191 => ScanCode.F21,
        // 192 => ScanCode.F22,
        // 193 => ScanCode.F23,
        // 194 => ScanCode.F24,
        // 200 => ScanCode.PLAYCD,
        // 201 => ScanCode.PAUSECD,
        // 202 => ScanCode.PROG3,
        // 203 => ScanCode.PROG4,
        // 204 => ScanCode.DASHBOARD,
        // 205 => ScanCode.SUSPEND,
        // 206 => ScanCode.CLOSE,
        // 207 => ScanCode.PLAY,
        // 208 => ScanCode.FASTFORWARD,
        // 209 => ScanCode.BASSBOOST,
        // 210 => ScanCode.PRINT,
        // 211 => ScanCode.HP,
        // 212 => ScanCode.CAMERA,
        // 213 => ScanCode.SOUND,
        // 214 => ScanCode.QUESTION,
        // 215 => ScanCode.EMAIL,
        // 216 => ScanCode.CHAT,
        // 217 => ScanCode.SEARCH,
        // 218 => ScanCode.CONNECT,
        // 219 => ScanCode.FINANCE,
        // 220 => ScanCode.SPORT,
        // 221 => ScanCode.SHOP,
        // 222 => ScanCode.ALTERASE,
        // 223 => ScanCode.CANCEL,
        // 224 => ScanCode.BRIGHTNESSDOW,
        // 225 => ScanCode.BRIGHTNESSU,
        // 226 => ScanCode.MEDIA,
        // 227 => ScanCode.SWITCHVIDEOMODE,
        // 228 => ScanCode.KBDILLUMTOGGLE,
        // 229 => ScanCode.KBDILLUMDOWN,
        // 230 => ScanCode.KBDILLUMUP,
        // 231 => ScanCode.SEND,
        // 232 => ScanCode.REPLY,
        // 233 => ScanCode.FORWARDMAIL,
        // 234 => ScanCode.SAVE,
        // 235 => ScanCode.DOCUMENTS,
        // 236 => ScanCode.BATTERY,
        // 237 => ScanCode.BLUETOOTH,
        // 238 => ScanCode.WLAN,
        // 239 => ScanCode.UWB,
        // 240 => return PhysicalKey::Unidentified(NativeScanCode.Unidentified),
        // 241 => ScanCode.VIDEO_NEXT,
        // 242 => ScanCode.VIDEO_PREV,
        // 243 => ScanCode.BRIGHTNESS_CYCLE,
        // 244 => ScanCode.BRIGHTNESS_AUTO,
        // 245 => ScanCode.DISPLAY_OFF,
        // 246 => ScanCode.WWAN,
        // 247 => ScanCode.RFKILL,
        // 248 => ScanCode.KEY_MICMUTE,
    };

    return look_up_table[code];
}
